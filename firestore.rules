rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Shops can be read by anyone (for public booking pages)
    // Only the authenticated owner can write to their shop document.
    match /shops/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId;
    }

    // Services can be read by anyone (for public booking pages)
    // Writes (create, update, delete) are only allowed by the authenticated owner.
    // The list operation is allowed if the query is filtering by the user's ID.
    match /services/{serviceId} {
      allow read: if true;
      allow list: if request.auth.uid == request.query.filters[0][2];
      allow write: if request.auth.uid == request.resource.data.userId;
    }
    
    // Staff can be read by anyone (for public booking pages)
    // Writes are only allowed by the authenticated owner.
    // The list operation is allowed if the query is filtering by the user's ID.
    match /staff/{staffId} {
      allow read: if true;
      allow list: if request.auth.uid == request.query.filters[0][2];
      allow write: if request.auth.uid == request.resource.data.userId;
    }

    // Bookings can be created by anyone for any shop.
    // Only the shop owner can read or manage their bookings.
    // The list operation is allowed if the query is filtering by the shop owner's ID.
    match /bookings/{bookingId} {
      allow create: if true;
      allow read, update, delete: if request.auth.uid == resource.data.shopOwnerId;
      allow list: if request.auth.uid == request.query.filters[0][2];
    }
    
    // Time off can only be managed by the shop owner.
    // The list operation is allowed if the query is filtering by the shop owner's ID.
    match /timeOff/{timeOffId} {
      allow read, write: if request.auth.uid == resource.data.shopOwnerId;
      allow list: if request.auth.uid == request.query.filters[0][2];
    }
  }
}
