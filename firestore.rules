rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner of the shop
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // A user can create a shop document for themselves
    match /shops/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }

    // Staff can be managed by the shop owner
    match /staff/{staffId} {
      allow read;
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(get(/databases/$(database)/documents/staff/$(staffId)).data.userId);
    }
    
    // Services can be managed by the shop owner
    match /services/{serviceId} {
      allow read;
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(get(/databases/$(database)/documents/services/$(serviceId)).data.userId);
    }

    // Bookings can be read by the owner and created by anyone.
    // Client can only update status, not other fields.
    match /bookings/{bookingId} {
      allow read: if isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.shopOwnerId);
      allow create; // Anyone can create a booking
      allow update: if request.resource.data.status == "Paid" && resource.data.status == "pending"; // Allow updating status from pending to paid
      allow delete: if isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.shopOwnerId);
    }

    // Time off can be managed by the shop owner.
    match /timeOff/{timeOffId} {
        allow read: if isOwner(get(/databases/$(database)/documents/timeOff/$(timeOffId)).data.shopOwnerId);
        allow create: if isOwner(request.resource.data.shopOwnerId);
        allow delete: if isOwner(get(/databases/$(database)/documents/timeOff/$(timeOffId)).data.shopOwnerId);
    }
  }
}